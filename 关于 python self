#最近正在学习python，在类当中，self 这个词的使用让我感到很纠结，搜索了一下之后，准备做一个记录。

class engine(object):
	scences = {"a":A(),
			   "b":B(),
			   "c":C(),
			   "death": Death(),
			   "win":Win()
			   }
			   
	def __init__(self):
		self.name = "a"
	
	def play(self):
		while True:
			current = self.scences.get(self.name)
			self.name = current.enter()
			
这是我在学笨方法学python ex43的时候，自己练习写的一段。开始的时候，在self.name中，，没有写self,导致了一个
UnboundLocalError: local variable 'name' referenced before assignment 的错误，是说name这个变量在之前已经
定义过了，就是在__init__函数中。所以，有了self，可以定义一个在类下的变量，而不是函数下的变量，实现同一个
类中不同函数之间变量的调用。

#这里在贴上一段搜索到的更深入的关于self的理解。


首先明确的是self只有在类的方法中才会有，独立的函数或方法是不必带有self的。self在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。

self名称不是必须的，在python中self不是关键词，你可以定义成a或b或其它名字都可以,但是约定成俗，不要搞另类，大家会不明白的。下例中将self改为myname一样没有错误：


复制代码
1 class Person:
2           def _init_(myname,name):
3                    myname.name=name
4           def sayhello(myname):
5                    print 'My name is:',myname.name
6 p=Person('Bill')
7 print p

复制代码

self指的是类实例对象本身(注意：不是类本身)。


复制代码
1 class Person:
2          def _init_(self,name):
3                   self.name=name
4          def sayhello(self):
5                   print 'My name is:',self.name
6 p=Person('Bill')
7 print p

复制代码

在上述例子中，self指向Person的实例p。 为什么不是指向类本身呢，如下例子：


复制代码
1 class Person:
2          def _init_(self,name):
3                   self.name=name
4          def sayhello(self):
5                   print 'My name is:',self.name
6 p=Person('Bill')
7 p1 = Person('Apple')
8 print p

复制代码

如果self指向类本身，那么当有多个实例对象时，self指向哪一个呢？



人生有限，要聚集你的精力到一件事情上，做到最好！ 
